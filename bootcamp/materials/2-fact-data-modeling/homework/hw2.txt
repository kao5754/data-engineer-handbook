-- 1. A query to deduplicate game_details from Day 1 so there's no duplicates
With deduped AS (
	SELECT 
	g.game_date_est,
	g.season,
	g.home_team_id, 
	gd.*,
	ROW_NUMBER() OVER (PARTITION BY gd.game_id, team_id, player_id ORDER BY game_date_est) AS row_num

	FROM game_details gd
	JOIN games g
	ON gd.game_id = g.game_id
)

SELECT
	game_date_est AS dim_game_date,
	season AS dim_season, 
	team_id AS dim_team_id, 
	player_id AS dim_player_id, 
	player_name AS dim_player_name, 
	start_position AS dim_start_position, 
	team_id = home_team_id AS dim_is_playing_at_home, 
	COALESCE(POSITION('DNP' IN comment), 0) > 0 AS dim_did_not_play, 
	COALESCE(POSITION('DND' IN comment), 0) > 0 AS dim_did_not_dress,
	COALESCE(POSITION('NWT' IN comment), 0) > 0 AS dim_not_with_team,
	CAST(SPLIT_PART(min, ':', 1) AS REAL)
	*
	(CAST(SPLIT_PART(min, ':', 2) AS REAL)/60) AS m_minutes, 
	fgm AS m_fgm, 
	fga AS m_fga, 
	fg3m AS m_fg3m, 
	fg3a AS m_fg3a,
	ftm AS m_ftm, 
	fta AS m_fta, 
	oreb AS m_oreb, 
	dreb AS m_dbreb, 
	reb AS m_reb, 
	ast AS m_ast, 
	stl as m_stl,
	blk AS m_blk, 
	"TO" AS m_turnovers, 
	pf as m_pf, 
	pts AS m_pts, 
	plus_minus AS plus_minus
	FROM deduped
	WHERE row_num = 1; 

	-- 2. A DDL for an user_devices_cumulated table that has:
-- a device_activity_datelist which tracks a users active days by browser_type
-- data type here should look similar to MAP<STRING, ARRAY[DATE]>
-- or you could have browser_type as a column with multiple rows for each user (either way works, just be consistent!)
-- A cumulative query to generate device_activity_datelist from events
 CREATE TABLE user_devices_cumulated (
 	user_id NUMERIC, 
 	device_id NUMERIC,
 	browser_type TEXT, 
 	date DATE, 
 	device_activity_datelist DATE[], 
 	PRIMARY KEY (user_id, device_id, browser_type, date)
 );

3. Cumulated
INSERT INTO user_devices_cumulated
WITH today AS (
SELECT e.user_id, 
	DATE(e.event_time) as date, 
	e.device_id, 
	d.browser_type, 
	ROW_NUMBER() OVER (PARTITION BY e.user_id, e.device_id, d.browser_type) AS row_num
FROm events e
LEFT JOIN devices AS d
ON e.device_id = d.device_id
WHERE DATE(e.event_time) = ('2023-01-31')
AND e.user_id IS NOT NULL 
AND d.device_id IS NOT NULL 
)
, today_deduped AS (
SELECT * FROM today
WHERE row_num = 1
) 
, yesterday AS (
	SELECT * FROM user_devices_cumulated
	WHERE date = DATE('2023-01-30')
)
SELECT COALESCE(t.user_id, y.user_id) AS user_id, 
COALESCE(t.device_id, y.device_id) AS device_id, 
COALESCE(t.browser_type, y.browser_type) AS browser_type, 
COALESCE(t.date, y.date + 1) AS date, 
CASE 
	WHEN y.device_activity_datelist IS NULL 
	THEN ARRAY[t.date]
	WHEN t.date IS NULL 
	THEN y.device_activity_datelist 
	ELSE y.device_activity_datelist || ARRAY[t.date]
END AS device_activity_datelist	
FROM today_deduped t
FULL OUTER JOIN yesterday y 
ON t.user_id = y.user_id
AND t.device_id = y.device_id
AND t.browser_type = y.browser_type

4. User Cumulated

With user_devices AS ( 
	SELECT 
		* 
	FROM user_devices_cumulated
	WHERE date = DATE('2023-01-31') 
), series AS (
	SELECT * FROM generate_series(DATE('2023-01-01'), DATE('2023-01-31'), INTERVAL '1 day') AS series_date	
), place_holder_ints AS (
SELECT CASE 
	WHEN device_activity_datelist @> ARRAY[DATE(s.series_date)]
		THEN CAST(POW(2, 32 - (date - DATE(s.series_date))) AS BIGINT)
		ELSE 0 
	END as placeholder_int_value, *
FROM user_devices ud
CROSS JOIN series s
) 

SELECT 
	user_id, 
	device_id, 
	browser_type, 
	device_activity_datelist, 
	CAST(CAST(SUM(p.placeholder_int_value) AS BIGINT) AS BIT(32)) as datelist_int
FROM place_holder_ints p
GROUP BY user_id, device_id, browser_type, device_activity_datelist

5. Host Cumulated
CREATE TABLE hosts_cumulated (
	host TEXT, 
	month_start DATE, 
	host_activity_datelist DATE[],
	PRIMARY KEY (host, month_start)
)

--6. a host_activity_datelist which logs to see which dates each host is experiencing any activity
-- The incremental query to generate host_activity_datelist
INSERT INTO hosts_cumulated
WITH today AS ( 
	SELECT 
		host, 
		DATE(event_time) AS date
	FROM events
	WHERE DATE(event_time) = DATE('2023-01-02')
	GROUP BY host, DATE(event_time)
), yesterday AS (
	SELECT 
		* 
	FROM hosts_cumulated
	WHERE month_start = DATE('2023-01-01')
)
	SELECT COALESCE(t.host, y.host) AS host, 
	COALESCE(DATE_TRUNC('month', t.date), y.month_start) AS month_start,
	CASE
		WHEN y.host_activity_datelist IS NULL 
		THEN ARRAY[t.date]
		WHEN t.date IS NULL 
		THEN y.host_activity_datelist
		ELSE y.host_activity_datelist || ARRAY[t.date]
	END AS host_activity_datelist
	FROM today t 
	FULL OUTER JOIN yesterday AS y
	ON t.host = y.host
	ON CONFLICT(host, month_start)
	DO
		UPDATE SET host_activity_datelist = EXCLUDED.host_activity_datelist

SELECT * FROM hosts_cumulated

7. Host Activity Reduced DDL 
CREATE TABLE host_activity_reduced (
	host TEXT, 
	month_start DATE, 
	hit_array BIGINT[],
	unique_visitors BIGINT[], 
	PRIMARY KEY (host, month_start)
)

8. 
-- An incremental query that loads host_activity_reduced
INSERT INTO host_activity_reduced 
WITH today AS ( 
	SELECT 
		host, 
		DATE(event_time) AS date, 
		COUNT(DISTINCT(user_id)) AS unique_visitors,
		COUNT(1) as hits
	FROM events
	WHERE DATE(event_time) = DATE('2023-01-01')
	GROUP BY host, DATE(event_time)
), yesterday AS (
	SELECT 
		* 
	FROM host_activity_reduced 
	WHERE month_start = DATE('2023-01-01')
)
	SELECT COALESCE(t.host, y.host) AS host, 
	COALESCE(DATE_TRUNC('month', t.date), y.month_start) AS month_start,
	CASE
		WHEN y.hit_array IS NOT NULL 
		THEN y.hit_array || ARRAY[COALESCE(t.hits, 0)]
		WHEN y.hit_array IS NULL
		THEN ARRAY_FILL(0, ARRAY[COALESCE(date - DATE(DATE_TRUNC('month', date)), 0)]) || ARRAY[COALESCE(t.hits, 0)]
	END AS hit_array,
	CASE
		WHEN y.unique_visitors IS NOT NULL 
		THEN y.unique_visitors || ARRAY[COALESCE(t.unique_visitors, 0)]
		WHEN y.unique_visitors IS NULL
		THEN ARRAY_FILL(0, ARRAY[COALESCE(date - DATE(DATE_TRUNC('month', date)), 0)]) || ARRAY[COALESCE(t.unique_visitors, 0)]
	END AS unique_visitors
	FROM today t 
	FULL OUTER JOIN yesterday AS y
	ON t.host = y.host
	ON CONFLICT(host, month_start)
	DO
		UPDATE SET unique_visitors = EXCLUDED.unique_visitors, 
			hit_array = EXCLUDED.hit_array
